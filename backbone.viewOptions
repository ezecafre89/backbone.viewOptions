/*
 * Backbone.ViewOptions, v0.1
 * Copyright (c)2013 Rotunda Software, LLC.
 * Distributed under MIT license
 * http://github.com/rotundasoftware/backbone.viewOptions
*/

( function( Backbone ) {
	Backbone.ViewOptions = {};

	Backbone.ViewOptions.attach = function( view, options, optionDeclarationsProperty ) {
		var optionNames = [];

		if( _.isUndefined( optionDeclarationsProperty ) ) optionDeclarationsProperty = "options";
		optionDeclarations = _.result( view, optionDeclarationsProperty );

		if( ! _.isUndefined( optionDeclarations ) ) {
			if( ! _.isArray( optionDeclarations ) ) throw new Error( "Option descriptors must be an array." );

			_.each( optionDeclarations, function( thisOptionDeclaration ) {
				var thisOptionName, assertExists, thisOptionDefaultValue;

				assertExists = false;
				thisOptionDefaultValue = undefined;

				if( _.isString( thisOptionDeclaration ) )
					thisOptionName = thisOptionDeclaration;
				else if( _.isObject( thisOptionDeclaration ) ) {
					if( ! thisOptionDeclaration.name ) throw new Error( "Missing option name in option object" );
					thisOptionName = thisOptionDeclaration.name;
					thisOptionDefaultValue = _.clone( thisOptionDeclaration.defaultValue );
				}
				else throw new Error( "Each element in the option descriptors array must be either a string or an object." );

				if( thisOptionName[ thisOptionName.length - 1 ] === "!" ) {
					thisOptionName = thisOptionName.slice( 0, thisOptionName.length - 1 );
					assertExists = true;
				}
				
				// note we do not throw an error if a required option is not supplied, but it is found on the   
				// object itself (due to a prior call of Backbone.ViewOptions.attach, most likely)
				if( assertExists &&
					( ! options || ! _.contains( _.keys( options ), thisOptionName ) &&
					_.isUndefined( view[ thisOptionName ] ) ) )
					throw new Error( "Required option \"" + thisOptionName + "\" not supplied." );

				// attach the supplied option, or the appropriate default value, to the view object
				if( options && thisOptionName in options ) {
					view[ thisOptionName ] = options[ thisOptionName ];
					// we do NOT delete the option of the options object here, so that multiple view
					// can be passed the same options object without issue.
				}
				else if( ! _.isUndefined( thisOptionDefaultValue ) && _.isUndefined( view[ thisOptionName ] ) )
					// note we do not write over any existing properties on the view itself.
					view[ thisOptionName ] = thisOptionDefaultValue;

				optionNames.push( thisOptionName );
			} );
		}
		
		return optionNames;
	};
} )( Backbone, _ );
